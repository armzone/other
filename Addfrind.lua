-- Enhanced Friend Request Script with Async Handling (No Game Freezing)
-- Made By Masterp (Fixed by Assistant) 
wait(30)
repeat task.wait() until game:IsLoaded() and game.Players.LocalPlayer.Character

local Players = game:GetService("Players")
local StarterGui = game:GetService("StarterGui")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

local PlayersQueue = {}
local isProcessing = false
local RequeueCount = {}
local lastRequestTime = 0

-- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
local REQUEUE_LIMIT = 3
local MIN_WAIT = 90 -- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 90 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á rate limit
local MAX_WAIT = 150 -- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 150 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
local RATE_LIMIT_PAUSE = 300 -- ‡∏û‡∏±‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ (300 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ) ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏à‡∏≠ rate limit
local REQUEST_COOLDOWN = 10 -- ‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á (10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠
local function getRandomWait()
    return math.random(MIN_WAIT, MAX_WAIT)
end

-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏•‡∏á‡∏Ñ‡∏¥‡∏ß (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á) - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
local function addPlayer(player)
    -- ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô
    if not player or player == LocalPlayer then return end
    
    -- ‡πÉ‡∏ä‡πâ loop ‡πÅ‡∏ó‡∏ô table.find ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î memory
    for i = 1, #PlayersQueue do
        if PlayersQueue[i] == player then return end
    end
    
    PlayersQueue[#PlayersQueue + 1] = player -- ‡πÉ‡∏ä‡πâ # ‡πÅ‡∏ó‡∏ô table.insert
    -- ‡∏•‡∏î print ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    if #PlayersQueue % 5 == 0 then -- print ‡∏ó‡∏∏‡∏Å 5 ‡∏Ñ‡∏ô
        print("‚ûï ‡∏Ñ‡∏¥‡∏ß‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: " .. #PlayersQueue .. " ‡∏Ñ‡∏ô")
    end
end

-- ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
local function removePlayer(player)
    if not player then return end
    
    -- ‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡πÅ‡∏ö‡∏ö optimized
    for i = 1, #PlayersQueue do
        if PlayersQueue[i] == player then
            table.remove(PlayersQueue, i)
            -- ‡∏•‡∏î print
            break
        end
    end
    
    -- ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î requeue count
    if player.UserId then
        RequeueCount[player.UserId] = nil
    end
end

-- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° event
Players.PlayerAdded:Connect(addPlayer)
Players.PlayerRemoving:Connect(removePlayer)

-- ‡πÉ‡∏™‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
print("============== << ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ñ‡∏¥‡∏ß >> ==============")
for _, player in ipairs(Players:GetPlayers()) do
    addPlayer(player)
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö async
local function sendFriendRequestAsync(player)
    return task.spawn(function()
        local success, result = pcall(function()
            return LocalPlayer:RequestFriendship(player)
        end)
        return success, result
    end)
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á error ‡πÅ‡∏•‡∏∞ success
local function handleResult(player, success, result)
    -- ‡∏ñ‡πâ‡∏≤ success = true ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
    if success == true then
        return "success"
    end
    
    -- ‡∏ñ‡πâ‡∏≤ success = false ‡∏´‡∏£‡∏∑‡∏≠ result ‡∏°‡∏µ error message
    local errorMsg = tostring(result):lower()
    
    -- ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô rate limiting ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if errorMsg:find("too many requests") or errorMsg:find("rate limit") or errorMsg:find("flood") then
        return "rate_limit"
    end
    
    -- ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠ pending
    if errorMsg:find("already friends") or errorMsg:find("pending") or errorMsg:find("friend request sent") then
        return "already_friends"
    end
    
    -- ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ friend limit ‡πÄ‡∏ï‡πá‡∏°
    if errorMsg:find("friend limit") or errorMsg:find("too many friends") then
        return "friend_limit_full"
    end
    
    -- ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ error message ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÅ‡∏ï‡πà success = false
    -- ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏ï‡πà API return ‡∏ú‡∏¥‡∏î
    if errorMsg == "false" or errorMsg == "" or errorMsg == "nil" then
        return "possible_success"
    end
    
    -- Error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    return "other_error"
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏≠‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏Å‡∏° - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
local function smartWait(duration)
    if duration <= 0 then return end
    
    local startTime = tick()
    local targetTime = startTime + duration
    
    repeat
        task.wait(math.min(1, targetTime - tick())) -- ‡∏£‡∏≠‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á
    until tick() >= targetTime
end

-- ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡∏•‡∏∞‡∏Ñ‡∏ô - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
local function processQueue()
    while true do
        -- ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß
        local queueSize = #PlayersQueue
        if queueSize > 0 and not isProcessing then
            -- ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏û‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
            local currentTime = tick()
            local timeSinceLastRequest = currentTime - lastRequestTime
            
            if timeSinceLastRequest < REQUEST_COOLDOWN then
                local remainingCooldown = REQUEST_COOLDOWN - timeSinceLastRequest
                -- ‡∏•‡∏î print ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
                if remainingCooldown > 5 then
                    print("‚è∞ ‡∏£‡∏≠‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏≠‡∏µ‡∏Å " .. math.ceil(remainingCooldown) .. " ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
                end
                smartWait(remainingCooldown)
            end
            
            isProcessing = true
            lastRequestTime = tick()
            
            local player = PlayersQueue[1]
            table.remove(PlayersQueue, 1)
            
            -- ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ player ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
            if not player or not player.Parent or player.Parent ~= Players then
                print("‚ö†Ô∏è ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡πâ‡∏ß")
                isProcessing = false
                continue
            end
            
            -- ‡∏•‡∏î print ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
            if queueSize <= 10 or queueSize % 10 == 0 then
                print("üîÑ ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á: " .. player.Name .. " (‡πÄ‡∏´‡∏•‡∏∑‡∏≠: " .. (queueSize-1) .. ")")
            end
            
            -- ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏ö‡∏ö async
            task.spawn(function()
                local success, result = pcall(LocalPlayer.RequestFriendship, LocalPlayer, player)
                local resultType = handleResult(player, success, result)
                
                if resultType == "success" or resultType == "possible_success" then
                    -- ‡∏•‡∏î notification ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
                    print("‚úÖ " .. player.Name .. " ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    if queueSize <= 5 then -- ‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏Ñ‡πà 5 ‡∏Ñ‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
                        StarterGui:SetCore("SendNotification", {
                            Title = "Friend Sent ‚úÖ",
                            Text = player.Name,
                            Duration = 2
                        })
                    end
                    RequeueCount[player.UserId] = nil
                    
                elseif resultType == "rate_limit" then
                    print("‚è∏Ô∏è Rate Limit! ‡∏û‡∏±‡∏Å " .. RATE_LIMIT_PAUSE .. " ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
                    StarterGui:SetCore("SendNotification", {
                        Title = "Rate Limited ‚è∏Ô∏è",
                        Text = "‡∏û‡∏±‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ",
                        Duration = 3
                    })
                    table.insert(PlayersQueue, 1, player)
                    isProcessing = false
                    smartWait(RATE_LIMIT_PAUSE)
                    return
                    
                elseif resultType == "already_friends" then
                    -- ‡∏•‡∏î print ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏õ‡∏Å‡∏ï‡∏¥
                    RequeueCount[player.UserId] = nil
                    
                elseif resultType == "friend_limit_full" then
                    print("üõë Friend limit ‡πÄ‡∏ï‡πá‡∏° - ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
                    StarterGui:SetCore("SendNotification", {
                        Title = "Friend Limit Full üõë",
                        Text = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß",
                        Duration = 5
                    })
                    isProcessing = false
                    return
                    
                else
                    -- Error handling ‡πÅ‡∏ö‡∏ö simplified
                    local retryCount = (RequeueCount[player.UserId] or 0) + 1
                    RequeueCount[player.UserId] = retryCount
                    
                    if retryCount <= REQUEUE_LIMIT then
                        -- ‡∏•‡∏î notification ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
                        if retryCount == REQUEUE_LIMIT then
                            print("‚ùå " .. player.Name .. " ‡∏•‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢")
                        end
                        table.insert(PlayersQueue, player)
                    else
                        print("üö´ ‡∏Ç‡πâ‡∏≤‡∏° " .. player.Name)
                        RequeueCount[player.UserId] = nil
                    end
                end
                
                isProcessing = false
            end)
            
            -- ‡∏£‡∏≠‡πÉ‡∏´‡πâ request ‡πÄ‡∏™‡∏£‡πá‡∏à
            while isProcessing do
                task.wait(0.5) -- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 0.1 ‡πÄ‡∏õ‡πá‡∏ô 0.5
            end
            
            -- ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ
            if #PlayersQueue > 0 then
                local waitTime = getRandomWait()
                -- ‡∏•‡∏î print ‡∏Å‡∏≤‡∏£‡∏£‡∏≠
                if waitTime > 100 then
                    print("‚è≥ ‡∏£‡∏≠ " .. waitTime .. " ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
                end
                smartWait(waitTime)
            end
        else
            -- ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß ‡∏£‡∏≠‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
            task.wait(10) -- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 5 ‡πÄ‡∏õ‡πá‡∏ô 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        end
    end
end

-- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏π‡∏õ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πà‡∏á Friend Request (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏Å‡∏°‡∏Ñ‡πâ‡∏≤‡∏á)")
print("‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤:")
print("   - ‡∏£‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á: " .. MIN_WAIT .. "-" .. MAX_WAIT .. " ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
print("   - ‡∏•‡∏≠‡∏á‡∏ã‡πâ‡∏≥‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: " .. REQUEUE_LIMIT .. " ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
print("   - ‡∏û‡∏±‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ rate limit: " .. RATE_LIMIT_PAUSE .. " ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
print("   - ‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥: " .. REQUEST_COOLDOWN .. " ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")

task.spawn(processQueue)
